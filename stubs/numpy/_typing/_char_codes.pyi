from __future__ import annotations
import typing
__all__ = list()
_BoolCodes: typing._LiteralGenericAlias  # value = typing.Literal['?', '=?', '<?', '>?', 'bool', 'bool_', 'bool8']
_ByteCodes: typing._LiteralGenericAlias  # value = typing.Literal['byte', 'b', '=b', '<b', '>b']
_BytesCodes: typing._LiteralGenericAlias  # value = typing.Literal['bytes', 'bytes_', 'bytes0', 'S', '=S', '<S', '>S']
_CDoubleCodes: typing._LiteralGenericAlias  # value = typing.Literal['cdouble', 'complex', 'complex_', 'cfloat', 'D', '=D', '<D', '>D']
_CLongDoubleCodes: typing._LiteralGenericAlias  # value = typing.Literal['clongdouble', 'clongfloat', 'longcomplex', 'G', '=G', '<G', '>G']
_CSingleCodes: typing._LiteralGenericAlias  # value = typing.Literal['csingle', 'singlecomplex', 'F', '=F', '<F', '>F']
_Complex128Codes: typing._LiteralGenericAlias  # value = typing.Literal['complex128', 'c16', '=c16', '<c16', '>c16']
_Complex64Codes: typing._LiteralGenericAlias  # value = typing.Literal['complex64', 'c8', '=c8', '<c8', '>c8']
_DT64Codes: typing._LiteralGenericAlias  # value = typing.Literal['datetime64', '=datetime64', '<datetime64', '>datetime64', 'datetime64[Y]', '=datetime64[Y]', '<datetime64[Y]', '>datetime64[Y]', 'datetime64[M]', '=datetime64[M]', '<datetime64[M]', '>datetime64[M]', 'datetime64[W]', '=datetime64[W]', '<datetime64[W]', '>datetime64[W]', 'datetime64[D]', '=datetime64[D]', '<datetime64[D]', '>datetime64[D]', 'datetime64[h]', '=datetime64[h]', '<datetime64[h]', '>datetime64[h]', 'datetime64[m]', '=datetime64[m]', '<datetime64[m]', '>datetime64[m]', 'datetime64[s]', '=datetime64[s]', '<datetime64[s]', '>datetime64[s]', 'datetime64[ms]', '=datetime64[ms]', '<datetime64[ms]', '>datetime64[ms]', 'datetime64[us]', '=datetime64[us]', '<datetime64[us]', '>datetime64[us]', 'datetime64[ns]', '=datetime64[ns]', '<datetime64[ns]', '>datetime64[ns]', 'datetime64[ps]', '=datetime64[ps]', '<datetime64[ps]', '>datetime64[ps]', 'datetime64[fs]', '=datetime64[fs]', '<datetime64[fs]', '>datetime64[fs]', 'datetime64[as]', '=datetime64[as]', '<datetime64[as]', '>datetime64[as]', 'M', '=M', '<M', '>M', 'M8', '=M8', '<M8', '>M8', 'M8[Y]', '=M8[Y]', '<M8[Y]', '>M8[Y]', 'M8[M]', '=M8[M]', '<M8[M]', '>M8[M]', 'M8[W]', '=M8[W]', '<M8[W]', '>M8[W]', 'M8[D]', '=M8[D]', '<M8[D]', '>M8[D]', 'M8[h]', '=M8[h]', '<M8[h]', '>M8[h]', 'M8[m]', '=M8[m]', '<M8[m]', '>M8[m]', 'M8[s]', '=M8[s]', '<M8[s]', '>M8[s]', 'M8[ms]', '=M8[ms]', '<M8[ms]', '>M8[ms]', 'M8[us]', '=M8[us]', '<M8[us]', '>M8[us]', 'M8[ns]', '=M8[ns]', '<M8[ns]', '>M8[ns]', 'M8[ps]', '=M8[ps]', '<M8[ps]', '>M8[ps]', 'M8[fs]', '=M8[fs]', '<M8[fs]', '>M8[fs]', 'M8[as]', '=M8[as]', '<M8[as]', '>M8[as]']
_DoubleCodes: typing._LiteralGenericAlias  # value = typing.Literal['double', 'float', 'float_', 'd', '=d', '<d', '>d']
_Float16Codes: typing._LiteralGenericAlias  # value = typing.Literal['float16', 'f2', '=f2', '<f2', '>f2']
_Float32Codes: typing._LiteralGenericAlias  # value = typing.Literal['float32', 'f4', '=f4', '<f4', '>f4']
_Float64Codes: typing._LiteralGenericAlias  # value = typing.Literal['float64', 'f8', '=f8', '<f8', '>f8']
_HalfCodes: typing._LiteralGenericAlias  # value = typing.Literal['half', 'e', '=e', '<e', '>e']
_Int16Codes: typing._LiteralGenericAlias  # value = typing.Literal['int16', 'i2', '=i2', '<i2', '>i2']
_Int32Codes: typing._LiteralGenericAlias  # value = typing.Literal['int32', 'i4', '=i4', '<i4', '>i4']
_Int64Codes: typing._LiteralGenericAlias  # value = typing.Literal['int64', 'i8', '=i8', '<i8', '>i8']
_Int8Codes: typing._LiteralGenericAlias  # value = typing.Literal['int8', 'i1', '=i1', '<i1', '>i1']
_IntCCodes: typing._LiteralGenericAlias  # value = typing.Literal['intc', 'i', '=i', '<i', '>i']
_IntCodes: typing._LiteralGenericAlias  # value = typing.Literal['long', 'int', 'int_', 'l', '=l', '<l', '>l']
_IntPCodes: typing._LiteralGenericAlias  # value = typing.Literal['intp', 'int0', 'p', '=p', '<p', '>p']
_LongDoubleCodes: typing._LiteralGenericAlias  # value = typing.Literal['longdouble', 'longfloat', 'g', '=g', '<g', '>g']
_LongLongCodes: typing._LiteralGenericAlias  # value = typing.Literal['longlong', 'q', '=q', '<q', '>q']
_ObjectCodes: typing._LiteralGenericAlias  # value = typing.Literal['object', 'object_', 'O', '=O', '<O', '>O']
_ShortCodes: typing._LiteralGenericAlias  # value = typing.Literal['short', 'h', '=h', '<h', '>h']
_SingleCodes: typing._LiteralGenericAlias  # value = typing.Literal['single', 'f', '=f', '<f', '>f']
_StrCodes: typing._LiteralGenericAlias  # value = typing.Literal['str', 'str_', 'str0', 'unicode', 'unicode_', 'U', '=U', '<U', '>U']
_TD64Codes: typing._LiteralGenericAlias  # value = typing.Literal['timedelta64', '=timedelta64', '<timedelta64', '>timedelta64', 'timedelta64[Y]', '=timedelta64[Y]', '<timedelta64[Y]', '>timedelta64[Y]', 'timedelta64[M]', '=timedelta64[M]', '<timedelta64[M]', '>timedelta64[M]', 'timedelta64[W]', '=timedelta64[W]', '<timedelta64[W]', '>timedelta64[W]', 'timedelta64[D]', '=timedelta64[D]', '<timedelta64[D]', '>timedelta64[D]', 'timedelta64[h]', '=timedelta64[h]', '<timedelta64[h]', '>timedelta64[h]', 'timedelta64[m]', '=timedelta64[m]', '<timedelta64[m]', '>timedelta64[m]', 'timedelta64[s]', '=timedelta64[s]', '<timedelta64[s]', '>timedelta64[s]', 'timedelta64[ms]', '=timedelta64[ms]', '<timedelta64[ms]', '>timedelta64[ms]', 'timedelta64[us]', '=timedelta64[us]', '<timedelta64[us]', '>timedelta64[us]', 'timedelta64[ns]', '=timedelta64[ns]', '<timedelta64[ns]', '>timedelta64[ns]', 'timedelta64[ps]', '=timedelta64[ps]', '<timedelta64[ps]', '>timedelta64[ps]', 'timedelta64[fs]', '=timedelta64[fs]', '<timedelta64[fs]', '>timedelta64[fs]', 'timedelta64[as]', '=timedelta64[as]', '<timedelta64[as]', '>timedelta64[as]', 'm', '=m', '<m', '>m', 'm8', '=m8', '<m8', '>m8', 'm8[Y]', '=m8[Y]', '<m8[Y]', '>m8[Y]', 'm8[M]', '=m8[M]', '<m8[M]', '>m8[M]', 'm8[W]', '=m8[W]', '<m8[W]', '>m8[W]', 'm8[D]', '=m8[D]', '<m8[D]', '>m8[D]', 'm8[h]', '=m8[h]', '<m8[h]', '>m8[h]', 'm8[m]', '=m8[m]', '<m8[m]', '>m8[m]', 'm8[s]', '=m8[s]', '<m8[s]', '>m8[s]', 'm8[ms]', '=m8[ms]', '<m8[ms]', '>m8[ms]', 'm8[us]', '=m8[us]', '<m8[us]', '>m8[us]', 'm8[ns]', '=m8[ns]', '<m8[ns]', '>m8[ns]', 'm8[ps]', '=m8[ps]', '<m8[ps]', '>m8[ps]', 'm8[fs]', '=m8[fs]', '<m8[fs]', '>m8[fs]', 'm8[as]', '=m8[as]', '<m8[as]', '>m8[as]']
_UByteCodes: typing._LiteralGenericAlias  # value = typing.Literal['ubyte', 'B', '=B', '<B', '>B']
_UInt16Codes: typing._LiteralGenericAlias  # value = typing.Literal['uint16', 'u2', '=u2', '<u2', '>u2']
_UInt32Codes: typing._LiteralGenericAlias  # value = typing.Literal['uint32', 'u4', '=u4', '<u4', '>u4']
_UInt64Codes: typing._LiteralGenericAlias  # value = typing.Literal['uint64', 'u8', '=u8', '<u8', '>u8']
_UInt8Codes: typing._LiteralGenericAlias  # value = typing.Literal['uint8', 'u1', '=u1', '<u1', '>u1']
_UIntCCodes: typing._LiteralGenericAlias  # value = typing.Literal['uintc', 'I', '=I', '<I', '>I']
_UIntCodes: typing._LiteralGenericAlias  # value = typing.Literal['ulong', 'uint', 'L', '=L', '<L', '>L']
_UIntPCodes: typing._LiteralGenericAlias  # value = typing.Literal['uintp', 'uint0', 'P', '=P', '<P', '>P']
_ULongLongCodes: typing._LiteralGenericAlias  # value = typing.Literal['ulonglong', 'Q', '=Q', '<Q', '>Q']
_UShortCodes: typing._LiteralGenericAlias  # value = typing.Literal['ushort', 'H', '=H', '<H', '>H']
_VoidCodes: typing._LiteralGenericAlias  # value = typing.Literal['void', 'void0', 'V', '=V', '<V', '>V']
